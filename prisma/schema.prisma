// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  manager
  care_worker
}

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   username String   @unique
//   password String
//   role     Role @default(CARE_WORKER)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model User {
  id            Int       @id @default(autoincrement())
  username      String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  name          String?   @unique
  role          Role      @default(care_worker)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  manager       Manager?
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Manager {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  organization String
  latitude     Float
  longitude    Float
  radius       Float    @default(2.0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
